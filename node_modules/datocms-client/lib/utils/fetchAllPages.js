"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = fetchAllPages;

var _bottleneck = _interopRequireDefault(require("bottleneck"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MAX_CONCURRENT = 10;
var ITEMS_PER_PAGE = 500;

function fetchAllPages(client, endpoint, params) {
  var limiter, baseResponse, totalCount, promises, _loop, index, data, result;

  return regeneratorRuntime.async(function fetchAllPages$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          limiter = new _bottleneck["default"]({
            maxConcurrent: MAX_CONCURRENT
          });
          _context2.next = 3;
          return regeneratorRuntime.awrap(client.get(endpoint, _objectSpread({}, params, {
            'page[limit]': ITEMS_PER_PAGE
          })));

        case 3:
          baseResponse = _context2.sent;
          totalCount = baseResponse.meta.total_count;
          promises = [];

          _loop = function _loop(index) {
            promises.push(limiter.schedule(function _callee() {
              var response;
              return regeneratorRuntime.async(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return regeneratorRuntime.awrap(client.get(endpoint, _objectSpread({}, params, {
                        'page[offset]': index,
                        'page[limit]': ITEMS_PER_PAGE
                      })));

                    case 2:
                      response = _context.sent;
                      return _context.abrupt("return", response);

                    case 4:
                    case "end":
                      return _context.stop();
                  }
                }
              });
            }));
          };

          for (index = ITEMS_PER_PAGE; index < totalCount; index += ITEMS_PER_PAGE) {
            _loop(index);
          }

          _context2.next = 10;
          return regeneratorRuntime.awrap(Promise.all(promises));

        case 10:
          data = _context2.sent;
          result = data.reduce(function (response, results) {
            response.data = response.data.concat(results.data);
            return response;
          }, _objectSpread({}, baseResponse));
          return _context2.abrupt("return", result);

        case 13:
        case "end":
          return _context2.stop();
      }
    }
  });
}